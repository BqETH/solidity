/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BqETHInterface extends ethers.utils.Interface {
  functions: {
    "activePolicies(address)": FunctionFragment;
    "activePuzzles(address)": FunctionFragment;
    "bignum_expmod(bytes,uint256,bytes)": FunctionFragment;
    "claimBlockNumber()": FunctionFragment;
    "claimPuzzle(address,uint256,bytes32,bytes32)": FunctionFragment;
    "claimReward(address,uint256,bytes,bytes[])": FunctionFragment;
    "escrow_balances(address)": FunctionFragment;
    "getActiveChain(address)": FunctionFragment;
    "getActivePuzzle(address)": FunctionFragment;
    "getPuzzle(uint256)": FunctionFragment;
    "log2(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "puzzleKey(bytes,bytes,uint256)": FunctionFragment;
    "r_value(bytes,bytes,bytes)": FunctionFragment;
    "registerFlippedPuzzle(bytes,tuple[],string,uint256,(string,string,string,string,string,string,string,string,string))": FunctionFragment;
    "registerPuzzleChain(bytes,tuple[],string,uint256,(string,string,string,string,string,string,string,string,string),string)": FunctionFragment;
    "userPuzzles(uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activePolicies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activePuzzles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bignum_expmod",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimPuzzle",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "escrow_balances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveChain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePuzzle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPuzzle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "log2", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "puzzleKey",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "r_value",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFlippedPuzzle",
    values: [
      BytesLike,
      {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      string,
      BigNumberish,
      {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPuzzleChain",
    values: [
      BytesLike,
      {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      string,
      BigNumberish,
      {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userPuzzles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "activePolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePuzzles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bignum_expmod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPuzzle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrow_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivePuzzle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPuzzle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "puzzleKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "r_value", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFlippedPuzzle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPuzzleChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPuzzles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "NewPolicyRegistered(string,string,string,string,string,string,string,string)": EventFragment;
    "NewPuzzleRegistered(address,uint256,bool)": EventFragment;
    "PuzzleInactive(uint256,bytes,string,string,uint256,string,string)": EventFragment;
    "RewardClaimed(uint256,bytes,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewPolicyRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPuzzleRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PuzzleInactive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
}

export type NewPolicyRegisteredEvent = TypedEvent<
  [string, string, string, string, string, string, string, string] & {
    id: string;
    label: string;
    policyEncryptingKey: string;
    encryptedTreasureMap: string;
    aliceVerifyingKey: string;
    size: string;
    startTimestamp: string;
    endTimestamp: string;
  }
>;

export type NewPuzzleRegisteredEvent = TypedEvent<
  [string, BigNumber, boolean] & {
    sender: string;
    pid: BigNumber;
    ready: boolean;
  }
>;

export type PuzzleInactiveEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, string, string] & {
    pid: BigNumber;
    solution: string;
    verifyingKey: string;
    messageKit: string;
    sdate: BigNumber;
    treasureMap: string;
    policyEncryptingKey: string;
  }
>;

export type RewardClaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    pid: BigNumber;
    y: string;
    sdate: BigNumber;
    reward: BigNumber;
  }
>;

export class BqETH extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BqETHInterface;

  functions: {
    activePolicies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string, string, string, string] & {
        creator: string;
        pid: BigNumber;
        messageKit: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        policyEncryptingKey: string;
      }
    >;

    activePuzzles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bignum_expmod(
      base: BytesLike,
      e: BigNumberish,
      m: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { o: string }>;

    claimBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimPuzzle(
      _farmer: string,
      _pid: BigNumberish,
      _h1: BytesLike,
      _x2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _farmer: string,
      _pid: BigNumberish,
      _y: BytesLike,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escrow_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActiveChain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          creator: string;
          farmer: string;
          N: string;
          x: string;
          t: BigNumber;
          sdate: BigNumber;
          h3: string;
          reward: BigNumber;
          phi: string;
          head: BigNumber;
        })[],
        string,
        string,
        string
      ] & {
        chain: ([
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          creator: string;
          farmer: string;
          N: string;
          x: string;
          t: BigNumber;
          sdate: BigNumber;
          h3: string;
          reward: BigNumber;
          phi: string;
          head: BigNumber;
        })[];
        verifyingKey: string;
        messageKit: string;
        treasureMap: string;
      }
    >;

    getActivePuzzle(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber
      ] & {
        pid: BigNumber;
        creator: string;
        N: string;
        x: string;
        t: BigNumber;
        h3: string;
        reward: BigNumber;
        verifyingKey: string;
        messageKit: string;
        treasureMap: string;
        encryptedPhi: string;
        sdate: BigNumber;
      }
    >;

    getPuzzle(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber
      ] & {
        pid: BigNumber;
        creator: string;
        N: string;
        x: string;
        t: BigNumber;
        h3: string;
        reward: BigNumber;
        verifyingKey: string;
        messageKit: string;
        treasureMap: string;
        phi: string;
        sdate: BigNumber;
      }
    >;

    log2(x: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    puzzleKey(
      _N: BytesLike,
      _x: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    r_value(
      _x: BytesLike,
      _y: BytesLike,
      _u: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    registerFlippedPuzzle(
      _N: BytesLike,
      _c: {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      _phi: string,
      _sdate: BigNumberish,
      _policy: {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerPuzzleChain(
      _N: BytesLike,
      _c: {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      _phi: string,
      _sdate: BigNumberish,
      _policy: {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      _messageKit: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userPuzzles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        creator: string;
        farmer: string;
        N: string;
        x: string;
        t: BigNumber;
        sdate: BigNumber;
        h3: string;
        reward: BigNumber;
        phi: string;
        head: BigNumber;
      }
    >;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  activePolicies(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string, string, string, string] & {
      creator: string;
      pid: BigNumber;
      messageKit: string;
      encryptedTreasureMap: string;
      revocationKit: string;
      aliceVerifyingKey: string;
      policyEncryptingKey: string;
    }
  >;

  activePuzzles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bignum_expmod(
    base: BytesLike,
    e: BigNumberish,
    m: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  claimBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  claimPuzzle(
    _farmer: string,
    _pid: BigNumberish,
    _h1: BytesLike,
    _x2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _farmer: string,
    _pid: BigNumberish,
    _y: BytesLike,
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escrow_balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getActiveChain(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      ([
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        creator: string;
        farmer: string;
        N: string;
        x: string;
        t: BigNumber;
        sdate: BigNumber;
        h3: string;
        reward: BigNumber;
        phi: string;
        head: BigNumber;
      })[],
      string,
      string,
      string
    ] & {
      chain: ([
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        creator: string;
        farmer: string;
        N: string;
        x: string;
        t: BigNumber;
        sdate: BigNumber;
        h3: string;
        reward: BigNumber;
        phi: string;
        head: BigNumber;
      })[];
      verifyingKey: string;
      messageKit: string;
      treasureMap: string;
    }
  >;

  getActivePuzzle(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber
    ] & {
      pid: BigNumber;
      creator: string;
      N: string;
      x: string;
      t: BigNumber;
      h3: string;
      reward: BigNumber;
      verifyingKey: string;
      messageKit: string;
      treasureMap: string;
      encryptedPhi: string;
      sdate: BigNumber;
    }
  >;

  getPuzzle(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      string,
      string,
      BigNumber
    ] & {
      pid: BigNumber;
      creator: string;
      N: string;
      x: string;
      t: BigNumber;
      h3: string;
      reward: BigNumber;
      verifyingKey: string;
      messageKit: string;
      treasureMap: string;
      phi: string;
      sdate: BigNumber;
    }
  >;

  log2(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  puzzleKey(
    _N: BytesLike,
    _x: BytesLike,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  r_value(
    _x: BytesLike,
    _y: BytesLike,
    _u: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  registerFlippedPuzzle(
    _N: BytesLike,
    _c: {
      x: BytesLike;
      t: BigNumberish;
      pid: BigNumberish;
      h3: BytesLike;
      reward: BigNumberish;
    }[],
    _phi: string,
    _sdate: BigNumberish,
    _policy: {
      id: string;
      label: string;
      policyEncryptingKey: string;
      encryptedTreasureMap: string;
      revocationKit: string;
      aliceVerifyingKey: string;
      size: string;
      startTimestamp: string;
      endTimestamp: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerPuzzleChain(
    _N: BytesLike,
    _c: {
      x: BytesLike;
      t: BigNumberish;
      pid: BigNumberish;
      h3: BytesLike;
      reward: BigNumberish;
    }[],
    _phi: string,
    _sdate: BigNumberish,
    _policy: {
      id: string;
      label: string;
      policyEncryptingKey: string;
      encryptedTreasureMap: string;
      revocationKit: string;
      aliceVerifyingKey: string;
      size: string;
      startTimestamp: string;
      endTimestamp: string;
    },
    _messageKit: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userPuzzles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber
    ] & {
      creator: string;
      farmer: string;
      N: string;
      x: string;
      t: BigNumber;
      sdate: BigNumber;
      h3: string;
      reward: BigNumber;
      phi: string;
      head: BigNumber;
    }
  >;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activePolicies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string, string, string, string] & {
        creator: string;
        pid: BigNumber;
        messageKit: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        policyEncryptingKey: string;
      }
    >;

    activePuzzles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bignum_expmod(
      base: BytesLike,
      e: BigNumberish,
      m: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    claimBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    claimPuzzle(
      _farmer: string,
      _pid: BigNumberish,
      _h1: BytesLike,
      _x2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _farmer: string,
      _pid: BigNumberish,
      _y: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrow_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveChain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          creator: string;
          farmer: string;
          N: string;
          x: string;
          t: BigNumber;
          sdate: BigNumber;
          h3: string;
          reward: BigNumber;
          phi: string;
          head: BigNumber;
        })[],
        string,
        string,
        string
      ] & {
        chain: ([
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string,
          BigNumber
        ] & {
          creator: string;
          farmer: string;
          N: string;
          x: string;
          t: BigNumber;
          sdate: BigNumber;
          h3: string;
          reward: BigNumber;
          phi: string;
          head: BigNumber;
        })[];
        verifyingKey: string;
        messageKit: string;
        treasureMap: string;
      }
    >;

    getActivePuzzle(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber
      ] & {
        pid: BigNumber;
        creator: string;
        N: string;
        x: string;
        t: BigNumber;
        h3: string;
        reward: BigNumber;
        verifyingKey: string;
        messageKit: string;
        treasureMap: string;
        encryptedPhi: string;
        sdate: BigNumber;
      }
    >;

    getPuzzle(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        string,
        string,
        BigNumber
      ] & {
        pid: BigNumber;
        creator: string;
        N: string;
        x: string;
        t: BigNumber;
        h3: string;
        reward: BigNumber;
        verifyingKey: string;
        messageKit: string;
        treasureMap: string;
        phi: string;
        sdate: BigNumber;
      }
    >;

    log2(x: BigNumberish, overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    puzzleKey(
      _N: BytesLike,
      _x: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    r_value(
      _x: BytesLike,
      _y: BytesLike,
      _u: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    registerFlippedPuzzle(
      _N: BytesLike,
      _c: {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      _phi: string,
      _sdate: BigNumberish,
      _policy: {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerPuzzleChain(
      _N: BytesLike,
      _c: {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      _phi: string,
      _sdate: BigNumberish,
      _policy: {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      _messageKit: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPuzzles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber
      ] & {
        creator: string;
        farmer: string;
        N: string;
        x: string;
        t: BigNumber;
        sdate: BigNumber;
        h3: string;
        reward: BigNumber;
        phi: string;
        head: BigNumber;
      }
    >;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewPolicyRegistered(string,string,string,string,string,string,string,string)"(
      id?: null,
      label?: null,
      policyEncryptingKey?: null,
      encryptedTreasureMap?: null,
      aliceVerifyingKey?: null,
      size?: null,
      startTimestamp?: null,
      endTimestamp?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string, string],
      {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      }
    >;

    NewPolicyRegistered(
      id?: null,
      label?: null,
      policyEncryptingKey?: null,
      encryptedTreasureMap?: null,
      aliceVerifyingKey?: null,
      size?: null,
      startTimestamp?: null,
      endTimestamp?: null
    ): TypedEventFilter<
      [string, string, string, string, string, string, string, string],
      {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      }
    >;

    "NewPuzzleRegistered(address,uint256,bool)"(
      sender?: null,
      pid?: null,
      ready?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { sender: string; pid: BigNumber; ready: boolean }
    >;

    NewPuzzleRegistered(
      sender?: null,
      pid?: null,
      ready?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { sender: string; pid: BigNumber; ready: boolean }
    >;

    "PuzzleInactive(uint256,bytes,string,string,uint256,string,string)"(
      pid?: null,
      solution?: null,
      verifyingKey?: null,
      messageKit?: null,
      sdate?: null,
      treasureMap?: null,
      policyEncryptingKey?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, string, string],
      {
        pid: BigNumber;
        solution: string;
        verifyingKey: string;
        messageKit: string;
        sdate: BigNumber;
        treasureMap: string;
        policyEncryptingKey: string;
      }
    >;

    PuzzleInactive(
      pid?: null,
      solution?: null,
      verifyingKey?: null,
      messageKit?: null,
      sdate?: null,
      treasureMap?: null,
      policyEncryptingKey?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, BigNumber, string, string],
      {
        pid: BigNumber;
        solution: string;
        verifyingKey: string;
        messageKit: string;
        sdate: BigNumber;
        treasureMap: string;
        policyEncryptingKey: string;
      }
    >;

    "RewardClaimed(uint256,bytes,uint256,uint256)"(
      pid?: null,
      y?: null,
      sdate?: null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      { pid: BigNumber; y: string; sdate: BigNumber; reward: BigNumber }
    >;

    RewardClaimed(
      pid?: null,
      y?: null,
      sdate?: null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      { pid: BigNumber; y: string; sdate: BigNumber; reward: BigNumber }
    >;
  };

  estimateGas: {
    activePolicies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    activePuzzles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bignum_expmod(
      base: BytesLike,
      e: BigNumberish,
      m: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    claimPuzzle(
      _farmer: string,
      _pid: BigNumberish,
      _h1: BytesLike,
      _x2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _farmer: string,
      _pid: BigNumberish,
      _y: BytesLike,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escrow_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveChain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActivePuzzle(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPuzzle(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    puzzleKey(
      _N: BytesLike,
      _x: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    r_value(
      _x: BytesLike,
      _y: BytesLike,
      _u: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerFlippedPuzzle(
      _N: BytesLike,
      _c: {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      _phi: string,
      _sdate: BigNumberish,
      _policy: {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerPuzzleChain(
      _N: BytesLike,
      _c: {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      _phi: string,
      _sdate: BigNumberish,
      _policy: {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      _messageKit: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userPuzzles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activePolicies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activePuzzles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bignum_expmod(
      base: BytesLike,
      e: BigNumberish,
      m: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimPuzzle(
      _farmer: string,
      _pid: BigNumberish,
      _h1: BytesLike,
      _x2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _farmer: string,
      _pid: BigNumberish,
      _y: BytesLike,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escrow_balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveChain(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivePuzzle(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPuzzle(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log2(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    puzzleKey(
      _N: BytesLike,
      _x: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    r_value(
      _x: BytesLike,
      _y: BytesLike,
      _u: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerFlippedPuzzle(
      _N: BytesLike,
      _c: {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      _phi: string,
      _sdate: BigNumberish,
      _policy: {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerPuzzleChain(
      _N: BytesLike,
      _c: {
        x: BytesLike;
        t: BigNumberish;
        pid: BigNumberish;
        h3: BytesLike;
        reward: BigNumberish;
      }[],
      _phi: string,
      _sdate: BigNumberish,
      _policy: {
        id: string;
        label: string;
        policyEncryptingKey: string;
        encryptedTreasureMap: string;
        revocationKit: string;
        aliceVerifyingKey: string;
        size: string;
        startTimestamp: string;
        endTimestamp: string;
      },
      _messageKit: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userPuzzles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
